// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Apartment {
  id                                   Int          @id @default(autoincrement())
  number                               Int
  prorating                            Decimal      @default(0) @db.Decimal(10, 9)
  mts2                                 Decimal      @default(0) @db.Decimal(10, 9)
  rol                                  String
  storageNumber                        Int
  storageRol                           String
  parkingNumber                        Int
  parkingRol                           String
  parking                              ParkingFloor @default(SUPERIOR)
  apartmentOwnerResponsableName        String
  apartmentOwnerResponsablePhoneNumber String
  emergencyContactName                 String
  emergencyContactPhoneNumber          String
  owners                               User[]

  @@map("apartments")
}

model User {
  id            String     @id @default(uuid())
  name          String
  email         String?    @unique
  password      String?
  emailVerified DateTime?  @map("email_verified")
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  role          Role       @default(OWNER)
  accounts      Account[]
  sessions      Session[]
  apartmentId   Int?
  apartment     Apartment? @relation(fields: [apartmentId], references: [id])

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model ServicePayment {
  id                 Int                @id @default(autoincrement())
  servicePaymentType ServicePaymentType @default(PAGO)
  documentId         String
  expireAt           DateTime           @db.Date
  paymentAt          DateTime?          @db.Date
  amount             Int
  observation        String             @db.Text
  file               String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Worker {
  id                  Int             @id @default(autoincrement())
  rutDNI              String          @unique
  name                String
  jobTitle            String
  startAt             DateTime
  bankAccount         String
  bank                String
  bankAccountType     BankAccountType @default(OTRO)
  afpName             String
  afpPercent          Decimal         @default(0) @db.Decimal(10, 2)
  healthName          String
  healthPercent       Decimal         @default(0) @db.Decimal(10, 2)
  salaryAmount        Int
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  payroll             Payroll[]
  isActive            Boolean?        @default(true)
  mealBonus           Int?            @default(0)
  transportationBonus Int?            @default(0)
  accountabilityBonus Int?            @default(0)
  otherBonus          Int?            @default(0)
  baseDays            Int?            @default(0)
}

model PayrollItem {
  id          Int             @id @default(autoincrement())
  isEarning   Boolean
  isDeduction Boolean
  isTaxable   Boolean
  description String
  details     PayrollDetail[]
}

model Payroll {
  id           Int             @id @default(autoincrement())
  payrollAt    DateTime        @db.Date
  workerId     Int
  workedDays   Int
  absenceDays  Int
  hours100     Decimal         @default(0) @db.Decimal(10, 2)
  hours50      Decimal         @default(0) @db.Decimal(10, 2)
  worker       Worker          @relation(fields: [workerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isCalculated Boolean         @default(false)
  payAdvance   Int?            @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  details      PayrollDetail[]
}

model PayrollDetail {
  id            Int         @id @default(autoincrement())
  payrollId     Int
  payrollItemId Int
  amount        Int
  payroll       Payroll     @relation(fields: [payrollId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  payrollItem   PayrollItem @relation(fields: [payrollItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  ADMIN
  USER
  OWNER
}

enum ServicePaymentType {
  PAGO
  CGE
  AGUAALTIPLANO
  RETIROBASURA
  MANTENCION
  CAJACHICA
  SEGURO
  REMUNERACIONES
}

enum ParkingFloor {
  SUPERIOR
  SUBTERANEO
}

enum BankAccountType {
  CTACTE
  CTAVISTA
  CTARUT
  OTRO
}
